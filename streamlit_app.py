import streamlit as st
import pandas as pd
import numpy as np
import random # Para generar un precio aleatorio
from scipy.optimize import newton # Para el c√°lculo de TIR
# app.py (en la parte superior de tu script, despu√©s de los imports)

CIUDADES_DISPONIBLES = [
    "Albany", "Albacete", "Alicante", "Almer√≠a", "Alcal√° de Henares", "Alcoy", "Algeciras", "Amsterdam", "Amberes",
    "Antequera", "Arrecife", "Arganda del Rey", "Asheville", "Atenas", "Austin", "√Åvila", "Badalona", "Bangkok",
    "Barcelona", "Barossa", "Barwon", "Beijin", "Belice", "Benidorm", "Bergamo", "Berl√≠n", "Bilbao", "Bolonia",
    "Boston", "Bozeman", "Bristol", "Brisbane", "Broward County", "Bruselas", "Buenos Aires", "Burgos", "Burdeos",
    "C√°ceres", "C√°diz", "Cambridge", "Cape Town", "Cartagena", "Castell√≥ de la Plana", "Ceuta", "Chicago",
    "Chiclana de la Frontera", "Ciudad Real", "Clark County", "Collado Villalba", "Col√≥n", "Copenhague", "C√≥rdoba",
    "Creta", "Cuenca", "Dallas", "Denver", "Donostia-San Sebasti√°n", "Dos Hermanas", "Dubl√≠n", "Edimburgo", "Egeo",
    "Elche", "Eskadi", "Estepona", "Ferrol", "Florencia", "Fort Worth", "Fuenlabrada", "Fuengirola", "Gante",
    "Geneva", "Getafe", "Getxo", "Gij√≥n", "Girona", "Granada", "Guadalajara", "Hawai", "Hong Kong", "Huesca",
    "Huelva", "Istanbul", "Ja√©n", "Jersey City", "Jerez de la Frontera", "La Haya", "L'Hospitalet de Llobregat",
    "Las Palmas de Gran Canaria", "Legan√©s", "Le√≥n", "Lisboa", "Logro√±o", "Lorca", "Los Angeles", "Lugo", "Londres",
    "Lyon", "Madrid", "Majadahonda", "M√°laga", "Mallorca", "Manchester", "Marbella", "Matar√≥", "Melbourne",
    "Menorca", "Mexico City", "Mil√°n", "M√≥stoles", "Montreal", "Mornington", "Munich", "Murcia", "N√°poles",
    "Nashville", "New Brunswick", "New Orleans", "New York", "Newark", "New Wales", "Oakland", "Orihuela", "Oslo",
    "Ottawa", "Ourense", "Oviedo", "Pacific Northwest Forests", "Pais Vasco", "Palencia", "Palma de Mallorca",
    "Pamplona", "Par√≠s", "Parla", "Pontevedra", "Porto", "Portland", "Pozuelo de Alarc√≥n", "Praga", "Puglia",
    "Puerto de Santa Mar√≠a", "Quebec", "Queensland", "Reus", "Rhode Island", "Riga", "R√≠o de Janeiro",
    "Rivas-Vaciamadrid", "Rochester", "Roma", "Roquetas de Mar", "R√≥terdam", "Sabadell", "Sagunto", "Salem",
    "Salamanca", "San Diego", "San Fernando", "San Francisco", "San Mateo", "San Sebasti√°n de los Reyes", "Santa Clara",
    "Santa Coloma de Gramenet", "Santa Cruz", "Santa Cruz de Tenerife", "Santiago", "Seattle", "Segovia", "Sevilla",
    "Shangh√°i", "Sicilia", "Singapur", "Soria", "Estocolmo", "S√≠dney", "Taipei", "Tarragona", "Tasmania", "Telde",
    "Terrassa", "The Hague", "Tokio", "Toledo", "Toronto", "Torrej√≥n de Ardoz", "Torrelavega", "Trentino",
    "Twin Cities", "Valencia", "Valdemoro", "Valladolid", "Vancouver", "Vaudvaud", "Venecia", "Viena", "Vigo",
    "Villareal", "Vitoria-Gasteiz", "Washington", "West Australia", "Winnipeg", "Zamora", "Zaragoza", "Z√∫rich"
]

costos_operacion_porcentaje = .5

ocupacion_anual_porcentaje = .70

tasa_descuento_objetivo = .10

horizonte_analisis_anos = 10


# app.py (en la parte superior de tu script, despu√©s de los imports)


# --- 1. Simulaci√≥n de Precio (PARA REEMPLAZAR DESPU√âS CON TU MODELO ML) ---
def get_random_price(min_price=50, max_price=300):
    """
    Genera un precio por noche aleatorio.
    Esto debe ser reemplazado por la predicci√≥n de tu modelo de Machine Learning.
    """
    return random.uniform(min_price, max_price)

# --- 2. Funciones de C√°lculo de TIR (Tasa Interna de Retorno) ---

def npv_function(tir_guess, flujos):
    """
    Funci√≥n que representa el VAN (Valor Actual Neto) para el c√°lculo de TIR.
    tir_guess: Es la tasa que estamos probando.
    flujos: Una lista o array de los flujos de caja del proyecto.
    """
    npv = 0
    for i, flujo in enumerate(flujos):
        npv += flujo / (1 + tir_guess)**i
    return npv

def calculate_irr(cash_flows):
    """
    Funci√≥n para calcular la TIR.
    Utiliza el m√©todo de Newton para encontrar la ra√≠z de la funci√≥n VAN.
    """
    try:
        # Intentamos un valor inicial para la TIR. Si hay un flujo negativo inicial,
        # y luego positivos, la TIR deber√≠a ser computable.
        irr = newton(lambda r: npv_function(r, cash_flows), 0.10)
        return irr
    except RuntimeError:
        # En caso de que el m√©todo de Newton no converja
        st.warning("No se pudo encontrar una TIR. Esto puede ocurrir si los flujos de caja son inconsistentes (ej. todos positivos o todos negativos despu√©s de la inversi√≥n).")
        return None
    except ZeroDivisionError:
        # En caso de flujos de caja inconsistentes
        st.warning("Error matem√°tico al calcular la TIR. Verifique los flujos de caja.")
        return None
    except Exception as e:
        st.error(f"Ocurri√≥ un error inesperado al calcular la TIR: {e}")
        return None


# --- 3. T√≠tulo y Descripci√≥n de la Aplicaci√≥n ---
st.set_page_config(layout="centered", page_title="Calculadora Airbnb") # Configuraci√≥n de la p√°gina

col_logo, col_title = st.columns([1, 4]) # Una columna peque√±a para el logo, una grande para el t√≠tulo

with col_logo:
    st.image("Logo.jpeg", width=100) # Ajusta el ancho seg√∫n tu logo

with col_title:
    st.title("Calculadora de Rentabilidad")

st.markdown("""
Analiza la viabilidad de comprar un inmueble para renta en Airbnb.
Obtendr√°s un **precio promedio por noche**
y la **Tasa Interna de Retorno (TIR)** estimada. 
Finalmente la **Alerta de recomendaci√≥n** para la compra o no del inmueble.
""")
st.markdown("---")

# --- 4. Inputs del inmueble (usuario) ---
st.header("1. Datos del Inmueble")

col1, col2 = st.columns(2)

with col1:
    ciudad = st.multiselect(
        "Ubicaci√≥n (ciudad):",
        options=CIUDADES_DISPONIBLES,
        default=["Barcelona"] if "Barcelona" in CIUDADES_DISPONIBLES else [],
        max_selections=1,
         placeholder="Escribe para buscar o selecciona una ciudad...",
        help="Seleccione la ciudad donde se encuentra el inmueble."
    )
    numero_personas = st.slider(
        "N√∫mero de personas que puede alojar:",
        min_value=1, max_value=20, value=4, help="Capacidad m√°xima de hu√©spedes."
    )
    tamano_m2 = st.number_input(
        "Tama√±o del inmueble (m¬≤):",
        min_value=10, max_value=500, value=70, step=5, help="Metros cuadrados del inmueble."
    )

with col2:
    amenities_count = st.slider(
        "N√∫mero de comodidades/amenities (ej. piscina, gimnasio, wifi, AC, parking):",
        min_value=0, max_value=15, value=5, help="Cantidad de servicios adicionales que ofrece el inmueble."
    )



st.markdown("---")
# --- 6. Costes de inversi√≥n (usuario) ---
st.header("2. Costes de inversi√≥n")

inversion_inmueble = st.number_input(
    "Inversi√≥n inicial en el inmueble (‚Ç¨):",
    min_value=10000.0, value=150000.0, step=1000.0, format="%.2f", help="Costo de compra del inmueble."
)
inversion_amueblar = st.number_input(
    "Inversi√≥n en amueblar y equipar (‚Ç¨):",
    min_value=0.0, value=20000.0, step=500.0, format="%.2f", help="Costo de mobiliario y equipamiento."
)

st.markdown("---")

# --- 6. Bot√≥n para Calcular ---
if st.button("üöÄ Calcular Precio y Rentabilidad", type="primary"):
    st.header("3. Resultados del An√°lisis")

    # --- Output de Precio (SIMULADO) ---
    precio_promedio_noche = get_random_price() # Llama a la funci√≥n para obtener el precio aleatorio
    st.subheader(f"Precio Promedio por Noche Estimado: **‚Ç¨{precio_promedio_noche:,.2f}**")
    st.info("üö® **Nota Importante:** Este precio es actualmente **aleatorio**. Una vez que tengas tu modelo de Machine Learning, deber√°s reemplazar la llamada a `get_random_price()` por la predicci√≥n de tu modelo.")
    st.markdown("---")

    # --- C√°lculo de Rentabilidad (TIR) ---
    st.subheader("An√°lisis de Rentabilidad (TIR)")

    if precio_promedio_noche > 0:
        ingresos_brutos_diarios = precio_promedio_noche
        dias_ocupados_anuales = 365 * ocupacion_anual_porcentaje
        ingresos_brutos_anuales = ingresos_brutos_diarios * dias_ocupados_anuales

        costos_operacion_anuales = ingresos_brutos_anuales * costos_operacion_porcentaje

        flujo_caja_anual_neto = ingresos_brutos_anuales - costos_operacion_anuales

        # Crear flujos de caja para la TIR
        # El primer flujo es la inversi√≥n inicial (negativa)
        inversion_total_inicial = inversion_inmueble + inversion_amueblar
        flujos_caja = [-inversion_total_inicial]

        # Luego, los flujos de caja anuales netos para el horizonte de an√°lisis
        for _ in range(horizonte_analisis_anos):
            flujos_caja.append(flujo_caja_anual_neto)

        # Opcional: Valor de rescate/venta del inmueble al final del per√≠odo
        # Para un an√°lisis m√°s completo, se podr√≠a a√±adir un valor de venta estimado
        # del inmueble al final del horizonte. Por ahora, lo omitimos para simplicidad.
        # Por ejemplo: flujos_caja[-1] += valor_venta_final_estimado

        tir = calculate_irr(flujos_caja)

        if tir is not None:
            st.metric(label="Tasa Interna de Retorno (TIR)", value=f"{tir:.2%}")

            if tir > tasa_descuento_objetivo:
                st.success(f"üí∏ **¬°Excelente!** La TIR ({tir:.2%}) es mayor que tu tasa de descuento objetivo ({tasa_descuento_objetivo:.2%}). "
                           "Este proyecto parece ser una **buena inversi√≥n** bajo tus criterios de rentabilidad.")
                st.balloons() # Peque√±a celebraci√≥n visual
            else:
                st.warning(f"‚ö†Ô∏è **Atenci√≥n:** La TIR ({tir:.2%}) es menor que tu tasa de descuento objetivo ({tasa_descuento_objetivo:.2%}). "
                           "Considera revisar los inputs o si esta inversi√≥n cumple con tus expectativas de rentabilidad. Podr√≠a no ser tan atractiva.")
        else:
            st.error("No se pudo calcular la TIR con los flujos de caja proporcionados. Aseg√∫rate de que haya una inversi√≥n inicial negativa seguida de flujos positivos.")
            st.info(f"Flujos de Caja generados: {flujos_caja}") # Ayuda para depurar
    else:
        st.warning("No se puede calcular la rentabilidad si el precio por noche es cero o negativo.")

# --- 7. Pie de P√°gina ---
st.markdown("---")
st.caption("Desarrollado con ‚ù§Ô∏è por Latam&Spain")
st.caption("Disclaimer: Esta herramienta proporciona estimaciones generales para una toma de decisi√≥n inicial.")

